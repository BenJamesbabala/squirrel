#ifndef CONVERTER_DENSETRAJECTORIESCONVERSION_HH_
#define CONVERTER_DENSETRAJECTORIESCONVERSION_HH_

#include "Core/CommonHeaders.hh"
#include <string.h>

namespace Converter {

class DenseTrajectoriesConversion {
private:
	struct TrajContainer {
	    u32 timestamp;
	    f32 traj[30];
	    f32 hog[96];
	    f32 hof[108];
	    f32 mbhx[96];
	    f32 mbhy[96];
	};

	/*
	 * paramTrajectoryFile_ is a gzipped dense trajectory file.
	 * paramCacheFileBasename_ is the base filename for output caches. Five caches will be created:
	 * <output-cache-file>.traj.cache,
	 * <output-cache-file>.hog.cache,
	 * <output-cache-file>.hof.cache,
	 * <output-cache-file>.mbhx.cache, and
	 * <output-cache-file>.mbhy.cache.
	 */
	static const Core::ParameterString paramTrajectoryFile_;
	static const Core::ParameterString paramCacheFileBasename_;

	std::string trajectoryFile_;
	std::string cacheFileBasename_;
	Core::BinaryStream cacheTraj_, cacheHog_, cacheHof_, cacheMbhx_, cacheMbhy_;
	u32 nFeatures_;

	void readTrajectoryList(std::string filename, std::vector<std::string>& list);
	void writeHeader(Core::BinaryStream& cache, u32 featureDim);
	void writeData(Core::BinaryStream& stream, u32 featureDim, f32* data);
	void convertToSequenceCache(std::string& filename);
	void openOutputCaches(std::string& filename);
	void closeOutputCaches();
	void updateHeader(std::string& filename);

public:
	DenseTrajectoriesConversion();
	/*
	 * convert dense trajectory file generated by the implementation of Wang et. al. (IJCV 2013) to feature cache
	 */
	void convert();
};

} // namespace

#endif /* CONVERTER_DENSETRAJECTORIESCONVERSION_HH_ */
